{"version":3,"sources":["Components/Section/Section.styled.jsx","Components/Section/Section.jsx","Components/FeedbackOptions/FeedbackOptions.styled.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.styled.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.styled.jsx","Components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Title","h1","Section","title","children","FeedbackButton","button","FeedbackPannel","FeedbackOptions","onLeaveFeedback","options","map","option","type","onClick","Statistic","p","props","higlight","StatisticPannel","Statistics","good","neutral","bad","total","positivePercentage","Message","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","reduce","prevValue","value","totalFeedback","positiveFeedbcakPercentage","toFixed","countPositiveFeedbackPercentage","className","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEaA,EAAUC,IAAOC,IAAV,wJAOPC,EAAQF,IAAOG,GAAV,4B,OCLLC,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAC5B,OACI,eAACP,EAAD,WAAS,cAACG,EAAD,UAAQG,IAAeC,MCJ3BC,EAAiBP,IAAOQ,OAAV,oPAYdC,EAAiBT,IAAOC,IAAV,qKCXdS,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC/C,OACI,cAACH,EAAD,UACKG,EAAQC,KAAI,SAAAC,GAAM,OAAK,cAACP,EAAD,CAA6BQ,KAAK,SAASC,QAAS,kBAAML,EAAgBG,IAA1E,SAAoFA,GAA/DA,SCJ5CG,EAAYjB,IAAOkB,EAAV,2FAGH,SAAAC,GAAK,OAAIA,EAAMC,UAAY,UAGjCC,EAAkBrB,IAAOC,IAAV,oFCLfqB,EAAa,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBACnD,OACI,eAACN,EAAD,WACI,eAACJ,EAAD,oBAAkBM,KAClB,eAACN,EAAD,uBAAqBO,KACrB,eAACP,EAAD,mBAAiBQ,KACjB,eAACR,EAAD,CAAWG,UAAQ,EAAnB,oBAA4BM,KAC5B,eAACT,EAAD,CAAWG,UAAQ,EAAnB,gCAAwCO,EAAxC,WCRCC,EAAU5B,IAAOkB,EAAV,yLCEPW,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACI,cAACF,EAAD,UAAUE,KCkEHC,MAlER,WACL,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KAoBMC,EAAqB,WAKzB,MAJe,CAACb,EAAMC,EAASC,GACVY,QAAO,SAACC,EAAWC,GACtC,OAAOD,EAAYC,IAClB,IAWCC,EAAgBJ,IAChBK,EARkC,WACtC,IAAMf,EAAQU,IAEd,OAD2B,IAAPb,EAAcG,GAChBgB,QAAQ,GAKOC,GAEjC,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,EAAD,CAASvC,MAAO,wBAAhB,UACE,cAAC,EAAD,CACEO,QARM,CAAC,OAAQ,UAAW,OAS1BD,gBAzCc,SAAAG,GACtB,OAAQA,GACN,IAAK,OACHmB,GAAQ,SAAAY,GAAI,OAAIA,EAAO,KACvB,MAEF,IAAK,UACHX,GAAW,SAAAW,GAAI,OAAIA,EAAO,KAC1B,MAEF,IAAK,MACHV,GAAO,SAAAU,GAAI,OAAIA,EAAO,KACtB,MAEF,QAAS,WA8Bc,IAAlBL,EACC,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EACPb,mBAAoBc,IAGtB,cAAC,EAAD,CAAcX,QAAS,4BCpDpBgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.538ba505.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 1400px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n`\r\nexport const Title = styled.h1`\r\n`","import { Wrapper, Title } from './Section.styled';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const Section = ({title, children}) => {\r\n    return (\r\n        <Wrapper><Title>{title}</Title>{children}</Wrapper>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const FeedbackButton = styled.button`\r\n    margin-right: 5px;\r\n    margin-bottom: 30px;\r\n    width: 100px;\r\n    height: 40px;\r\n    font-size: medium;\r\n    font-weight: bold;\r\n    background-color: #e76849;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\nexport const FeedbackPannel = styled.div`\r\n    & :first-of-type {\r\n        background-color: #71c64d;\r\n    }\r\n\r\n    & :nth-of-type(2) {\r\n        background-color: #d9f16b;\r\n    }\r\n`","import PropTypes from 'prop-types'\r\nimport { FeedbackButton, FeedbackPannel } from \"./FeedbackOptions.styled\";\r\n\r\nexport const FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n    return (\r\n        <FeedbackPannel>\r\n            {options.map(option => (<FeedbackButton key={option} type=\"button\" onClick={() => onLeaveFeedback(option)}>{option}</FeedbackButton>))}\r\n        </FeedbackPannel>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const Statistic = styled.p`\r\n    margin: 0;\r\n    margin-bottom: 2px;\r\n    font-weight: ${props => props.higlight && 'bold'}\r\n`\r\n\r\nexport const StatisticPannel = styled.div`\r\n    display: inline-flex;\r\n    flex-direction: column;\r\n`","import { StatisticPannel, Statistic } from './Statistics.styled';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Statistics = ({good, neutral, bad, total, positivePercentage}) => {\r\n    return (\r\n        <StatisticPannel>\r\n            <Statistic>Good: {good}</Statistic>\r\n            <Statistic>Neutral: {neutral}</Statistic>\r\n            <Statistic>Bad: {bad}</Statistic>\r\n            <Statistic higlight>Total: {total}</Statistic>\r\n            <Statistic higlight>Positive feedback: {positivePercentage}%</Statistic>\r\n        </StatisticPannel>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.string,\r\n}","import styled from \"@emotion/styled\"\r\n\r\nexport const Message = styled.p`\r\n    display: inline-flex;\r\n    font-weight: bold;\r\n    padding: 5px;\r\n    border: 1px solid tomato;\r\n    border-radius: 3px;\r\n    background-color: tomato;\r\n`","import { Message } from \"./Notification.styled\"\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const Notification = ({ message }) => {\r\n    return (\r\n        <Message>{message}</Message>\r\n    )\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n}","import { useState } from 'react';\nimport { Section } from './Components/Section/Section';\nimport { FeedbackOptions } from './Components/FeedbackOptions/FeedbackOptions';\nimport { Statistics } from './Components/Statistics/Statistics';\nimport { Notification } from './Components/Notification/Notification';\n\nexport function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prev => prev + 1)\n        break;\n      \n      case 'neutral':\n        setNeutral(prev => prev + 1);\n        break;\n        \n      case 'bad':\n        setBad(prev => prev + 1);\n        break;\n\n      default: return;\n    } \n  }\n\n  const countTotalFeedback = () => {\n    const values = [good, neutral, bad];\n    const total = values.reduce((prevValue, value) => {\n      return prevValue + value;\n    }, 0);\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    const percentage = (good * 100) / total;\n    return percentage.toFixed(0);\n  };\n\n  const options = [\"good\", \"neutral\", \"bad\"];\n  const totalFeedback = countTotalFeedback();\n  const positiveFeedbcakPercentage = countPositiveFeedbackPercentage();\n\n    return (\n      <div className=\"App\">\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n\n          {totalFeedback !== 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedback}\n              positivePercentage={positiveFeedbcakPercentage}\n            />\n          ) : (\n            <Notification message={'No feedback given'} />\n          )} \n        </Section>\n      </div>\n    );\n  \n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}